/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  EpiReportJSONTypes,
} from './types/report-json';
import {
  EpiReportDataTypes,
} from './types';

export namespace Components {
  interface AppRoot {
    'report': string;
  }
  interface CronkDatastreams {
    'getState': () => Promise<{ streams: EpiReportJSONTypes.Stream[] | undefined; pageComponentsReady: boolean; }>;
    'reload': () => Promise<void>;
    'streams'?: EpiReportJSONTypes.Stream[];
    'streamsID'?: string;
  }
  interface CronkPage {
    'loadConfig': (newConfig: any) => Promise<void>;
    'pageConfig'?: EpiReportJSONTypes.ReportDefinition | undefined;
    'showConfig': boolean;
    'validateConfig': (configIn: any) => Promise<boolean>;
  }
  interface EpiErrorMessage {
    'message': string;
  }
  interface EpiEventStream {
    'config': any;
  }
  interface EpiFunnel {
    'statsList': EpiReportDataTypes.IFunnelListItem[];
  }
  interface EpiInstanceDatastream {
    'channel': string;
    'credentials': RequestCredentials;
    'flavour': string;
    'idWorkflowInstance': string | number;
    'mode': RequestMode;
    'pollFrequency': number;
    'type': string;
  }
  interface EpiPollDatastream {
    'acceptsFilters': boolean;
    'addFilter': (fnKey: string, filterFn: () => boolean) => Promise<void>;
    'channels': EpiReportDataStream.IChannelShape[];
    'corsProxy': string;
    'credentials': RequestCredentials;
    'listFilters': () => Promise<{}>;
    'mode': RequestMode;
    'pollFrequency': number;
    'resendBroadcast': () => Promise<void>;
    'responseHandler': EpiReportDataStream.IDatastreamResponseHandler;
    'type': string;
    'url': string | null;
  }
  interface EpiReportComponents {}
  interface EpiReportPanel {
    'panelConfig': any;
  }
  interface EpiReportSelector {
    'heading': string;
    'selectList': ISelectListMember[];
    'selector': any;
  }
  interface EpiReportTitle {
    'reportTitle': string;
  }
  interface EpiReportVersion {}
  interface EpiSocketioDatastream {
    'acceptsFilters': boolean;
    'channels': EpiReportDataStream.IChannelShape[];
    'resendBroadcast': () => Promise<void>;
    'responseHandler': EpiReportDataStream.IDatastreamSocketResponseHandler;
    'type': string;
    'url': string | null;
  }
  interface EpiStatsBox {
    'statsList': EpiReportDataTypes.IStatsBoxListItem[];
  }
}

declare global {


  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLCronkDatastreamsElement extends Components.CronkDatastreams, HTMLStencilElement {}
  var HTMLCronkDatastreamsElement: {
    prototype: HTMLCronkDatastreamsElement;
    new (): HTMLCronkDatastreamsElement;
  };

  interface HTMLCronkPageElement extends Components.CronkPage, HTMLStencilElement {}
  var HTMLCronkPageElement: {
    prototype: HTMLCronkPageElement;
    new (): HTMLCronkPageElement;
  };

  interface HTMLEpiErrorMessageElement extends Components.EpiErrorMessage, HTMLStencilElement {}
  var HTMLEpiErrorMessageElement: {
    prototype: HTMLEpiErrorMessageElement;
    new (): HTMLEpiErrorMessageElement;
  };

  interface HTMLEpiEventStreamElement extends Components.EpiEventStream, HTMLStencilElement {}
  var HTMLEpiEventStreamElement: {
    prototype: HTMLEpiEventStreamElement;
    new (): HTMLEpiEventStreamElement;
  };

  interface HTMLEpiFunnelElement extends Components.EpiFunnel, HTMLStencilElement {}
  var HTMLEpiFunnelElement: {
    prototype: HTMLEpiFunnelElement;
    new (): HTMLEpiFunnelElement;
  };

  interface HTMLEpiInstanceDatastreamElement extends Components.EpiInstanceDatastream, HTMLStencilElement {}
  var HTMLEpiInstanceDatastreamElement: {
    prototype: HTMLEpiInstanceDatastreamElement;
    new (): HTMLEpiInstanceDatastreamElement;
  };

  interface HTMLEpiPollDatastreamElement extends Components.EpiPollDatastream, HTMLStencilElement {}
  var HTMLEpiPollDatastreamElement: {
    prototype: HTMLEpiPollDatastreamElement;
    new (): HTMLEpiPollDatastreamElement;
  };

  interface HTMLEpiReportComponentsElement extends Components.EpiReportComponents, HTMLStencilElement {}
  var HTMLEpiReportComponentsElement: {
    prototype: HTMLEpiReportComponentsElement;
    new (): HTMLEpiReportComponentsElement;
  };

  interface HTMLEpiReportPanelElement extends Components.EpiReportPanel, HTMLStencilElement {}
  var HTMLEpiReportPanelElement: {
    prototype: HTMLEpiReportPanelElement;
    new (): HTMLEpiReportPanelElement;
  };

  interface HTMLEpiReportSelectorElement extends Components.EpiReportSelector, HTMLStencilElement {}
  var HTMLEpiReportSelectorElement: {
    prototype: HTMLEpiReportSelectorElement;
    new (): HTMLEpiReportSelectorElement;
  };

  interface HTMLEpiReportTitleElement extends Components.EpiReportTitle, HTMLStencilElement {}
  var HTMLEpiReportTitleElement: {
    prototype: HTMLEpiReportTitleElement;
    new (): HTMLEpiReportTitleElement;
  };

  interface HTMLEpiReportVersionElement extends Components.EpiReportVersion, HTMLStencilElement {}
  var HTMLEpiReportVersionElement: {
    prototype: HTMLEpiReportVersionElement;
    new (): HTMLEpiReportVersionElement;
  };

  interface HTMLEpiSocketioDatastreamElement extends Components.EpiSocketioDatastream, HTMLStencilElement {}
  var HTMLEpiSocketioDatastreamElement: {
    prototype: HTMLEpiSocketioDatastreamElement;
    new (): HTMLEpiSocketioDatastreamElement;
  };

  interface HTMLEpiStatsBoxElement extends Components.EpiStatsBox, HTMLStencilElement {}
  var HTMLEpiStatsBoxElement: {
    prototype: HTMLEpiStatsBoxElement;
    new (): HTMLEpiStatsBoxElement;
  };
  interface HTMLElementTagNameMap {
    'app-root': HTMLAppRootElement;
    'cronk-datastreams': HTMLCronkDatastreamsElement;
    'cronk-page': HTMLCronkPageElement;
    'epi-error-message': HTMLEpiErrorMessageElement;
    'epi-event-stream': HTMLEpiEventStreamElement;
    'epi-funnel': HTMLEpiFunnelElement;
    'epi-instance-datastream': HTMLEpiInstanceDatastreamElement;
    'epi-poll-datastream': HTMLEpiPollDatastreamElement;
    'epi-report-components': HTMLEpiReportComponentsElement;
    'epi-report-panel': HTMLEpiReportPanelElement;
    'epi-report-selector': HTMLEpiReportSelectorElement;
    'epi-report-title': HTMLEpiReportTitleElement;
    'epi-report-version': HTMLEpiReportVersionElement;
    'epi-socketio-datastream': HTMLEpiSocketioDatastreamElement;
    'epi-stats-box': HTMLEpiStatsBoxElement;
  }
}

declare namespace LocalJSX {
  interface AppRoot {
    'report'?: string;
  }
  interface CronkDatastreams {
    'streams'?: EpiReportJSONTypes.Stream[];
    'streamsID'?: string;
  }
  interface CronkPage {
    'onCronkPageReady'?: (event: CustomEvent<void>) => void;
    'pageConfig'?: EpiReportJSONTypes.ReportDefinition | undefined;
    'showConfig'?: boolean;
  }
  interface EpiErrorMessage {
    'message'?: string;
  }
  interface EpiEventStream {
    'config'?: any;
  }
  interface EpiFunnel {
    'statsList'?: EpiReportDataTypes.IFunnelListItem[];
  }
  interface EpiInstanceDatastream {
    'channel'?: string;
    'credentials'?: RequestCredentials;
    'flavour': string;
    'idWorkflowInstance': string | number;
    'mode'?: RequestMode;
    'pollFrequency'?: number;
    'type'?: string;
  }
  interface EpiPollDatastream {
    'acceptsFilters'?: boolean;
    'channels'?: EpiReportDataStream.IChannelShape[];
    'corsProxy'?: string;
    'credentials'?: RequestCredentials;
    'mode'?: RequestMode;
    'pollFrequency'?: number;
    'responseHandler'?: EpiReportDataStream.IDatastreamResponseHandler;
    'type'?: string;
    'url'?: string | null;
  }
  interface EpiReportComponents {
    'onComponentsLoaded'?: (event: CustomEvent<void>) => void;
  }
  interface EpiReportPanel {
    'panelConfig'?: any;
  }
  interface EpiReportSelector {
    'heading'?: string;
    'selectList'?: ISelectListMember[];
    'selector'?: any;
  }
  interface EpiReportTitle {
    'reportTitle'?: string;
  }
  interface EpiReportVersion {}
  interface EpiSocketioDatastream {
    'acceptsFilters'?: boolean;
    'channels'?: EpiReportDataStream.IChannelShape[];
    'responseHandler'?: EpiReportDataStream.IDatastreamSocketResponseHandler;
    'type'?: string;
    'url'?: string | null;
  }
  interface EpiStatsBox {
    'statsList'?: EpiReportDataTypes.IStatsBoxListItem[];
  }

  interface IntrinsicElements {
    'app-root': AppRoot;
    'cronk-datastreams': CronkDatastreams;
    'cronk-page': CronkPage;
    'epi-error-message': EpiErrorMessage;
    'epi-event-stream': EpiEventStream;
    'epi-funnel': EpiFunnel;
    'epi-instance-datastream': EpiInstanceDatastream;
    'epi-poll-datastream': EpiPollDatastream;
    'epi-report-components': EpiReportComponents;
    'epi-report-panel': EpiReportPanel;
    'epi-report-selector': EpiReportSelector;
    'epi-report-title': EpiReportTitle;
    'epi-report-version': EpiReportVersion;
    'epi-socketio-datastream': EpiSocketioDatastream;
    'epi-stats-box': EpiStatsBox;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'app-root': LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
      'cronk-datastreams': LocalJSX.CronkDatastreams & JSXBase.HTMLAttributes<HTMLCronkDatastreamsElement>;
      'cronk-page': LocalJSX.CronkPage & JSXBase.HTMLAttributes<HTMLCronkPageElement>;
      'epi-error-message': LocalJSX.EpiErrorMessage & JSXBase.HTMLAttributes<HTMLEpiErrorMessageElement>;
      'epi-event-stream': LocalJSX.EpiEventStream & JSXBase.HTMLAttributes<HTMLEpiEventStreamElement>;
      'epi-funnel': LocalJSX.EpiFunnel & JSXBase.HTMLAttributes<HTMLEpiFunnelElement>;
      'epi-instance-datastream': LocalJSX.EpiInstanceDatastream & JSXBase.HTMLAttributes<HTMLEpiInstanceDatastreamElement>;
      'epi-poll-datastream': LocalJSX.EpiPollDatastream & JSXBase.HTMLAttributes<HTMLEpiPollDatastreamElement>;
      'epi-report-components': LocalJSX.EpiReportComponents & JSXBase.HTMLAttributes<HTMLEpiReportComponentsElement>;
      'epi-report-panel': LocalJSX.EpiReportPanel & JSXBase.HTMLAttributes<HTMLEpiReportPanelElement>;
      'epi-report-selector': LocalJSX.EpiReportSelector & JSXBase.HTMLAttributes<HTMLEpiReportSelectorElement>;
      'epi-report-title': LocalJSX.EpiReportTitle & JSXBase.HTMLAttributes<HTMLEpiReportTitleElement>;
      'epi-report-version': LocalJSX.EpiReportVersion & JSXBase.HTMLAttributes<HTMLEpiReportVersionElement>;
      'epi-socketio-datastream': LocalJSX.EpiSocketioDatastream & JSXBase.HTMLAttributes<HTMLEpiSocketioDatastreamElement>;
      'epi-stats-box': LocalJSX.EpiStatsBox & JSXBase.HTMLAttributes<HTMLEpiStatsBoxElement>;
    }
  }
}


