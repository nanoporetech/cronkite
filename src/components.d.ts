/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CronkJSONTypes, } from "./types/report-json";
import { CronkDataTypes, } from "./types";
export namespace Components {
    interface CronkApp {
        "report": string;
    }
    interface CronkDatastreams {
        "getState": () => Promise<{
            streams: CronkJSONTypes.Stream[] | undefined;
            pageComponentsReady: boolean;
        }>;
        "reload": () => Promise<void>;
        "streams"?: CronkJSONTypes.Stream[];
        "streamsID"?: string;
    }
    interface CronkErrormessage {
        "message": string;
    }
    interface CronkEventStream {
        "config": any;
    }
    interface CronkFunnel {
        "hideCount": boolean;
        "hideLabel": boolean;
        "hidePercent": boolean;
        "hideStats": boolean;
        "statsList": CronkDataTypes.IFunnelListItem[];
    }
    interface CronkList {
        "bullets": boolean;
        "items": any[];
        "ordered": boolean;
        "reverse": boolean;
    }
    interface CronkPage {
        "loadConfig": (newConfig: any) => Promise<void>;
        "pageConfig"?: CronkJSONTypes.ReportDefinition | undefined;
        "showConfig": boolean;
        "validateConfig": (configIn: any) => Promise<boolean>;
    }
    interface CronkPageComponents {
    }
    interface CronkPagePanel {
        "panelConfig": any;
    }
    interface CronkPollDatastream {
        "acceptsFilters": boolean;
        "addFilter": (fnKey: string, filterFn: () => boolean) => Promise<void>;
        "channels": CronkDataStream.IChannelShape[];
        "corsProxy": string;
        "credentials": RequestCredentials;
        "listFilters": () => Promise<{}>;
        "mode": RequestMode;
        "pollFrequency": number;
        "resendBroadcast": () => Promise<void>;
        "responseFormat": RESPONSE_TYPES;
        "responseHandler": CronkDataStream.IDatastreamResponseHandler;
        "type": string;
        "url": string | null;
    }
    interface CronkProportionBar {
        "color": string;
        "value": number;
    }
    interface CronkSelector {
        "heading": string;
        "selectList": ISelectListMember[];
        "selector": any;
    }
    interface CronkSimpleGrid {
        "data": any[];
        "display": "grid" | "auto";
        "headers": string[];
    }
    interface CronkSocketioDatastream {
        "acceptsFilters": boolean;
        "channels": CronkDataStream.IChannelShape[];
        "resendBroadcast": () => Promise<void>;
        "responseHandler": CronkDataStream.IDatastreamSocketResponseHandler;
        "type": string;
        "url": string | null;
    }
    interface CronkStatsbox {
        "statsList": CronkDataTypes.IStatsBoxListItem[];
    }
    interface CronkTitle {
        "reportTitle": string;
    }
    interface CronkVersion {
    }
    interface EpiInstanceDatastream {
        "channel": string;
        "credentials": RequestCredentials;
        "flavour": string;
        "idWorkflowInstance": string | number;
        "mode": RequestMode;
        "pollFrequency": number;
        "type": string;
    }
}
declare global {
    interface HTMLCronkAppElement extends Components.CronkApp, HTMLStencilElement {
    }
    var HTMLCronkAppElement: {
        prototype: HTMLCronkAppElement;
        new (): HTMLCronkAppElement;
    };
    interface HTMLCronkDatastreamsElement extends Components.CronkDatastreams, HTMLStencilElement {
    }
    var HTMLCronkDatastreamsElement: {
        prototype: HTMLCronkDatastreamsElement;
        new (): HTMLCronkDatastreamsElement;
    };
    interface HTMLCronkErrormessageElement extends Components.CronkErrormessage, HTMLStencilElement {
    }
    var HTMLCronkErrormessageElement: {
        prototype: HTMLCronkErrormessageElement;
        new (): HTMLCronkErrormessageElement;
    };
    interface HTMLCronkEventStreamElement extends Components.CronkEventStream, HTMLStencilElement {
    }
    var HTMLCronkEventStreamElement: {
        prototype: HTMLCronkEventStreamElement;
        new (): HTMLCronkEventStreamElement;
    };
    interface HTMLCronkFunnelElement extends Components.CronkFunnel, HTMLStencilElement {
    }
    var HTMLCronkFunnelElement: {
        prototype: HTMLCronkFunnelElement;
        new (): HTMLCronkFunnelElement;
    };
    interface HTMLCronkListElement extends Components.CronkList, HTMLStencilElement {
    }
    var HTMLCronkListElement: {
        prototype: HTMLCronkListElement;
        new (): HTMLCronkListElement;
    };
    interface HTMLCronkPageElement extends Components.CronkPage, HTMLStencilElement {
    }
    var HTMLCronkPageElement: {
        prototype: HTMLCronkPageElement;
        new (): HTMLCronkPageElement;
    };
    interface HTMLCronkPageComponentsElement extends Components.CronkPageComponents, HTMLStencilElement {
    }
    var HTMLCronkPageComponentsElement: {
        prototype: HTMLCronkPageComponentsElement;
        new (): HTMLCronkPageComponentsElement;
    };
    interface HTMLCronkPagePanelElement extends Components.CronkPagePanel, HTMLStencilElement {
    }
    var HTMLCronkPagePanelElement: {
        prototype: HTMLCronkPagePanelElement;
        new (): HTMLCronkPagePanelElement;
    };
    interface HTMLCronkPollDatastreamElement extends Components.CronkPollDatastream, HTMLStencilElement {
    }
    var HTMLCronkPollDatastreamElement: {
        prototype: HTMLCronkPollDatastreamElement;
        new (): HTMLCronkPollDatastreamElement;
    };
    interface HTMLCronkProportionBarElement extends Components.CronkProportionBar, HTMLStencilElement {
    }
    var HTMLCronkProportionBarElement: {
        prototype: HTMLCronkProportionBarElement;
        new (): HTMLCronkProportionBarElement;
    };
    interface HTMLCronkSelectorElement extends Components.CronkSelector, HTMLStencilElement {
    }
    var HTMLCronkSelectorElement: {
        prototype: HTMLCronkSelectorElement;
        new (): HTMLCronkSelectorElement;
    };
    interface HTMLCronkSimpleGridElement extends Components.CronkSimpleGrid, HTMLStencilElement {
    }
    var HTMLCronkSimpleGridElement: {
        prototype: HTMLCronkSimpleGridElement;
        new (): HTMLCronkSimpleGridElement;
    };
    interface HTMLCronkSocketioDatastreamElement extends Components.CronkSocketioDatastream, HTMLStencilElement {
    }
    var HTMLCronkSocketioDatastreamElement: {
        prototype: HTMLCronkSocketioDatastreamElement;
        new (): HTMLCronkSocketioDatastreamElement;
    };
    interface HTMLCronkStatsboxElement extends Components.CronkStatsbox, HTMLStencilElement {
    }
    var HTMLCronkStatsboxElement: {
        prototype: HTMLCronkStatsboxElement;
        new (): HTMLCronkStatsboxElement;
    };
    interface HTMLCronkTitleElement extends Components.CronkTitle, HTMLStencilElement {
    }
    var HTMLCronkTitleElement: {
        prototype: HTMLCronkTitleElement;
        new (): HTMLCronkTitleElement;
    };
    interface HTMLCronkVersionElement extends Components.CronkVersion, HTMLStencilElement {
    }
    var HTMLCronkVersionElement: {
        prototype: HTMLCronkVersionElement;
        new (): HTMLCronkVersionElement;
    };
    interface HTMLEpiInstanceDatastreamElement extends Components.EpiInstanceDatastream, HTMLStencilElement {
    }
    var HTMLEpiInstanceDatastreamElement: {
        prototype: HTMLEpiInstanceDatastreamElement;
        new (): HTMLEpiInstanceDatastreamElement;
    };
    interface HTMLElementTagNameMap {
        "cronk-app": HTMLCronkAppElement;
        "cronk-datastreams": HTMLCronkDatastreamsElement;
        "cronk-errormessage": HTMLCronkErrormessageElement;
        "cronk-event-stream": HTMLCronkEventStreamElement;
        "cronk-funnel": HTMLCronkFunnelElement;
        "cronk-list": HTMLCronkListElement;
        "cronk-page": HTMLCronkPageElement;
        "cronk-page-components": HTMLCronkPageComponentsElement;
        "cronk-page-panel": HTMLCronkPagePanelElement;
        "cronk-poll-datastream": HTMLCronkPollDatastreamElement;
        "cronk-proportion-bar": HTMLCronkProportionBarElement;
        "cronk-selector": HTMLCronkSelectorElement;
        "cronk-simple-grid": HTMLCronkSimpleGridElement;
        "cronk-socketio-datastream": HTMLCronkSocketioDatastreamElement;
        "cronk-statsbox": HTMLCronkStatsboxElement;
        "cronk-title": HTMLCronkTitleElement;
        "cronk-version": HTMLCronkVersionElement;
        "epi-instance-datastream": HTMLEpiInstanceDatastreamElement;
    }
}
declare namespace LocalJSX {
    interface CronkApp {
        "report"?: string;
    }
    interface CronkDatastreams {
        "streams"?: CronkJSONTypes.Stream[];
        "streamsID"?: string;
    }
    interface CronkErrormessage {
        "message"?: string;
    }
    interface CronkEventStream {
        "config"?: any;
    }
    interface CronkFunnel {
        "hideCount"?: boolean;
        "hideLabel"?: boolean;
        "hidePercent"?: boolean;
        "hideStats"?: boolean;
        "statsList"?: CronkDataTypes.IFunnelListItem[];
    }
    interface CronkList {
        "bullets"?: boolean;
        "items"?: any[];
        "ordered"?: boolean;
        "reverse"?: boolean;
    }
    interface CronkPage {
        "onCronkPageReady"?: (event: CustomEvent<void>) => void;
        "pageConfig"?: CronkJSONTypes.ReportDefinition | undefined;
        "showConfig"?: boolean;
    }
    interface CronkPageComponents {
        "onComponentsLoaded"?: (event: CustomEvent<void>) => void;
    }
    interface CronkPagePanel {
        "panelConfig"?: any;
    }
    interface CronkPollDatastream {
        "acceptsFilters"?: boolean;
        "channels"?: CronkDataStream.IChannelShape[];
        "corsProxy"?: string;
        "credentials"?: RequestCredentials;
        "mode"?: RequestMode;
        "pollFrequency"?: number;
        "responseFormat"?: RESPONSE_TYPES;
        "responseHandler"?: CronkDataStream.IDatastreamResponseHandler;
        "type"?: string;
        "url"?: string | null;
    }
    interface CronkProportionBar {
        "color"?: string;
        "value"?: number;
    }
    interface CronkSelector {
        "heading"?: string;
        "selectList"?: ISelectListMember[];
        "selector"?: any;
    }
    interface CronkSimpleGrid {
        "data"?: any[];
        "display"?: "grid" | "auto";
        "headers"?: string[];
    }
    interface CronkSocketioDatastream {
        "acceptsFilters"?: boolean;
        "channels"?: CronkDataStream.IChannelShape[];
        "responseHandler"?: CronkDataStream.IDatastreamSocketResponseHandler;
        "type"?: string;
        "url"?: string | null;
    }
    interface CronkStatsbox {
        "statsList"?: CronkDataTypes.IStatsBoxListItem[];
    }
    interface CronkTitle {
        "reportTitle"?: string;
    }
    interface CronkVersion {
    }
    interface EpiInstanceDatastream {
        "channel"?: string;
        "credentials"?: RequestCredentials;
        "flavour": string;
        "idWorkflowInstance": string | number;
        "mode"?: RequestMode;
        "pollFrequency"?: number;
        "type"?: string;
    }
    interface IntrinsicElements {
        "cronk-app": CronkApp;
        "cronk-datastreams": CronkDatastreams;
        "cronk-errormessage": CronkErrormessage;
        "cronk-event-stream": CronkEventStream;
        "cronk-funnel": CronkFunnel;
        "cronk-list": CronkList;
        "cronk-page": CronkPage;
        "cronk-page-components": CronkPageComponents;
        "cronk-page-panel": CronkPagePanel;
        "cronk-poll-datastream": CronkPollDatastream;
        "cronk-proportion-bar": CronkProportionBar;
        "cronk-selector": CronkSelector;
        "cronk-simple-grid": CronkSimpleGrid;
        "cronk-socketio-datastream": CronkSocketioDatastream;
        "cronk-statsbox": CronkStatsbox;
        "cronk-title": CronkTitle;
        "cronk-version": CronkVersion;
        "epi-instance-datastream": EpiInstanceDatastream;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cronk-app": LocalJSX.CronkApp & JSXBase.HTMLAttributes<HTMLCronkAppElement>;
            "cronk-datastreams": LocalJSX.CronkDatastreams & JSXBase.HTMLAttributes<HTMLCronkDatastreamsElement>;
            "cronk-errormessage": LocalJSX.CronkErrormessage & JSXBase.HTMLAttributes<HTMLCronkErrormessageElement>;
            "cronk-event-stream": LocalJSX.CronkEventStream & JSXBase.HTMLAttributes<HTMLCronkEventStreamElement>;
            "cronk-funnel": LocalJSX.CronkFunnel & JSXBase.HTMLAttributes<HTMLCronkFunnelElement>;
            "cronk-list": LocalJSX.CronkList & JSXBase.HTMLAttributes<HTMLCronkListElement>;
            "cronk-page": LocalJSX.CronkPage & JSXBase.HTMLAttributes<HTMLCronkPageElement>;
            "cronk-page-components": LocalJSX.CronkPageComponents & JSXBase.HTMLAttributes<HTMLCronkPageComponentsElement>;
            "cronk-page-panel": LocalJSX.CronkPagePanel & JSXBase.HTMLAttributes<HTMLCronkPagePanelElement>;
            "cronk-poll-datastream": LocalJSX.CronkPollDatastream & JSXBase.HTMLAttributes<HTMLCronkPollDatastreamElement>;
            "cronk-proportion-bar": LocalJSX.CronkProportionBar & JSXBase.HTMLAttributes<HTMLCronkProportionBarElement>;
            "cronk-selector": LocalJSX.CronkSelector & JSXBase.HTMLAttributes<HTMLCronkSelectorElement>;
            "cronk-simple-grid": LocalJSX.CronkSimpleGrid & JSXBase.HTMLAttributes<HTMLCronkSimpleGridElement>;
            "cronk-socketio-datastream": LocalJSX.CronkSocketioDatastream & JSXBase.HTMLAttributes<HTMLCronkSocketioDatastreamElement>;
            "cronk-statsbox": LocalJSX.CronkStatsbox & JSXBase.HTMLAttributes<HTMLCronkStatsboxElement>;
            "cronk-title": LocalJSX.CronkTitle & JSXBase.HTMLAttributes<HTMLCronkTitleElement>;
            "cronk-version": LocalJSX.CronkVersion & JSXBase.HTMLAttributes<HTMLCronkVersionElement>;
            "epi-instance-datastream": LocalJSX.EpiInstanceDatastream & JSXBase.HTMLAttributes<HTMLEpiInstanceDatastreamElement>;
        }
    }
}
